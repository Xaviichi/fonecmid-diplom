
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговора") <> Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Выбран некорректный вид договора");
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_ДатаНачалаДействия") > Дата 
		ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_ДатаОкончанияДействия") < Дата Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Дата документа не попадает в период действия договора");
		Возврат;
	КонецЕсли;
	
	УсловияОплатыКлиенту = РегистрыСведений.ВКМ_УсловияОплатыСотрудников.УсловияОплатыПоСотруднику(Специалист, Дата);
	
	Если НЕ ЗначениеЗаполнено(УсловияОплатыКлиенту) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Не заполнены условия оплаты сотруднику");
		Возврат;
	КонецЕсли;
	
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	Для Каждого ТекСтрокаВыполненныеРаботы из ВыполненныеРаботы Цикл
		СтоимостьЧасаРаботыСпециалиста = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_СтоимостьЧасаРаботыСпециалиста");
		
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Договор = Договор;
		Движение.КоличествоЧасов = ТекСтрокаВыполненныеРаботы.ЧасовКОплатеКлиенту;
		Движение.СуммаКОплате = СтоимостьЧасаРаботыСпециалиста
			*ТекСтрокаВыполненныеРаботы.ЧасовКОплатеКлиенту;
			
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата;
		Движение.Сотрудник = Специалист;
		Движение.ЧасовКОплате = ТекСтрокаВыполненныеРаботы.ЧасовКОплатеКлиенту;
		Движение.СуммаКОплате = СтоимостьЧасаРаботыСпециалиста * УсловияОплатыКлиенту.ПроцентОтРабот * ТекСтрокаВыполненныеРаботы.ЧасовКОплатеКлиенту / 100;
	КонецЦикла;

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	ДополнительныеСвойства.Вставить("ЭтоНовыйОбъект", ЭтоНовый());

КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;

	Если ДополнительныеСвойства.ЭтоНовыйОбъект Тогда
		СформироватьУведомление();
	КонецЕсли;

	ПроверитьСовпадениеРеквизитов(Дата, "Дата"); 
	ПроверитьСовпадениеРеквизитов(ВремяНачалаРабот, "ВремяНачалаРабот");
	ПроверитьСовпадениеРеквизитов(ВремяОкончанияРабот, "ВремяОкончанияРабот");
	ПроверитьСовпадениеРеквизитов(Специалист, "Специалист");	

КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьСовпадениеРеквизитов(ПроверяемыйРеквизит, НаименованиеРеквизита)

	СтарыйРеквизит = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, НаименованиеРеквизита);
	Если ПроверяемыйРеквизит <> СтарыйРеквизит Тогда
		СформироватьУведомление(ПроверяемыйРеквизит); 
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьУведомление(ПроверяемыйРеквизит = Неопределено)

	НовоеУведомление = Справочники.ВКМ_УведомленияДляТелеграма.СоздатьЭлемент();
	Если ПроверяемыйРеквизит <> Неопределено Тогда
		НовоеУведомление.ТекстСообщения = СтрШаблон("Изменен реквизит %1 в документе №%2 от %3. Новое значение: %4",
			Строка(ПроверяемыйРеквизит), Номер, Дата, ПроверяемыйРеквизит);
	Иначе
		НовоеУведомление.ТекстСообщения = СтрШаблон("Создан новый документ №%1 от %2.",
			Номер, Дата);
	КонецЕсли;
	НовоеУведомление.Записать();

КонецПроцедуры

#КонецОбласти

#КонецЕсли